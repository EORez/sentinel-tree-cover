{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/john.brandt/anaconda3/envs/remote_sensing/lib/python3.6/site-packages/sklearn/externals/joblib/__init__.py:15: DeprecationWarning: sklearn.externals.joblib is deprecated in 0.21 and will be removed in 0.23. Please import this functionality directly from joblib, which can be installed with: pip install joblib. If this warning is raised when loading pickled models, you may need to re-serialize those models with scikit-learn 0.21+.\n",
      "  warnings.warn(msg, category=DeprecationWarning)\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from random import shuffle\n",
    "from sentinelhub import WmsRequest, WcsRequest, MimeType, CRS, BBox, constants\n",
    "from s2cloudless import S2PixelCloudDetector, CloudMaskRequest\n",
    "import logging\n",
    "from collections import Counter\n",
    "import datetime"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# parameters\n",
    "\n",
    "DATA_LOCATION = '../data/subplot.csv'\n",
    "OUTPUT_FOLDER = 'data/processed/'\n",
    "EPSG = CRS.WGS84\n",
    "IMAGE_SIZE = 14\n",
    "API_KEY = 'a14b8591-2127-4d2a-b5df-b47a9f2895e1'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "ename": "FileNotFoundError",
     "evalue": "[Errno 2] File b'../data/subplot.csv' does not exist: b'../data/subplot.csv'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-39-0842da39b1ca>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 9\u001b[0;31m \u001b[0mdf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'../data/subplot.csv'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     10\u001b[0m \u001b[0mdf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'IMAGERY_TITLE'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0mdf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdropna\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maxis\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/remote_sensing/lib/python3.6/site-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36mparser_f\u001b[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, dialect, tupleize_cols, error_bad_lines, warn_bad_lines, delim_whitespace, low_memory, memory_map, float_precision)\u001b[0m\n\u001b[1;32m    700\u001b[0m                     skip_blank_lines=skip_blank_lines)\n\u001b[1;32m    701\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 702\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0m_read\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    703\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    704\u001b[0m     \u001b[0mparser_f\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__name__\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/remote_sensing/lib/python3.6/site-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36m_read\u001b[0;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[1;32m    427\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    428\u001b[0m     \u001b[0;31m# Create the parser.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 429\u001b[0;31m     \u001b[0mparser\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTextFileReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    430\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    431\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mchunksize\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0miterator\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/remote_sensing/lib/python3.6/site-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, f, engine, **kwds)\u001b[0m\n\u001b[1;32m    893\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moptions\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'has_index_names'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'has_index_names'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    894\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 895\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    896\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    897\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/remote_sensing/lib/python3.6/site-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36m_make_engine\u001b[0;34m(self, engine)\u001b[0m\n\u001b[1;32m   1120\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mengine\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'c'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1121\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mengine\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'c'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1122\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mCParserWrapper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moptions\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1123\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1124\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mengine\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'python'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/remote_sensing/lib/python3.6/site-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, src, **kwds)\u001b[0m\n\u001b[1;32m   1851\u001b[0m         \u001b[0mkwds\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'usecols'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0musecols\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1852\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1853\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reader\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mparsers\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTextReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msrc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1854\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munnamed_cols\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reader\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munnamed_cols\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1855\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/parsers.pyx\u001b[0m in \u001b[0;36mpandas._libs.parsers.TextReader.__cinit__\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/parsers.pyx\u001b[0m in \u001b[0;36mpandas._libs.parsers.TextReader._setup_parser_source\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] File b'../data/subplot.csv' does not exist: b'../data/subplot.csv'"
     ]
    }
   ],
   "source": [
    "def calc_bbox(plot_id):\n",
    "    subs = df[df['PLOT_ID'] == plot_id]\n",
    "    # TOP, LEFT, BOTTOM, RIGHT\n",
    "    # (min x, min y), (max x, max y)\n",
    "    return [(min(subs['LON']), min(subs['LAT'])),\n",
    "            (max(subs['LON']), max(subs['LAT']))]\n",
    "\n",
    "\n",
    "df = pd.read_csv('../data/subplot.csv')\n",
    "df = df.drop('IMAGERY_TITLE', axis = 1)\n",
    "df = df.dropna(axis = 0)\n",
    "plot_ids = set(df['PLOT_ID'])\n",
    "\n",
    "locations = [calc_bbox(x) for x in plot_ids]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "cloud_detector = S2PixelCloudDetector(threshold=0.4, average_over=4, dilation_size=2)\n",
    "\n",
    "def identify_clouds(bbox, epsg = EPSG, time = ('2017-01-01', '2017-12-31')):\n",
    "    try:\n",
    "        box = BBox(bbox, crs = epsg)\n",
    "        cloud_request = WmsRequest(\n",
    "            layer='CLOUD_DETECTION',\n",
    "            bbox=box,\n",
    "            time=time,\n",
    "            width=IMAGE_SIZE,\n",
    "            height=IMAGE_SIZE,\n",
    "            image_format = MimeType.TIFF_d32f,\n",
    "            maxcc=1,\n",
    "            instance_id=API_KEY,\n",
    "            custom_url_params = {constants.CustomUrlParam.UPSAMPLING: 'BICUBIC'},\n",
    "            time_difference=datetime.timedelta(hours=24),\n",
    "        )\n",
    "        \n",
    "        cloud_img = cloud_request.get_data()\n",
    "        cloud_probs = cloud_detector.get_cloud_probability_maps(np.array(cloud_img))\n",
    "        means = np.mean(cloud_probs, (1, 2))\n",
    "        cloud_steps = [i for i, val in enumerate(means) if val > 0.25]\n",
    "        return cloud_steps, means\n",
    "    except Exception as e:\n",
    "        logging.fatal(e, exc_info=True)\n",
    "    \n",
    "        \n",
    "    \n",
    "def download_tiles(bbox, epsg = EPSG, time = ('2017-01-01', '2017-12-31')):\n",
    "    try:\n",
    "        box = BBox(bbox, crs = epsg)\n",
    "        image_request = WmsRequest(\n",
    "                layer='ALL_BANDS_NDVI',\n",
    "                bbox=box,\n",
    "                time=time,\n",
    "                width=IMAGE_SIZE,\n",
    "                height=IMAGE_SIZE,\n",
    "                image_format = MimeType.TIFF_d32f,\n",
    "                maxcc=1,\n",
    "                instance_id=API_KEY,\n",
    "                custom_url_params = {constants.CustomUrlParam.UPSAMPLING: 'BICUBIC'},\n",
    "                time_difference=datetime.timedelta(hours=24),\n",
    "            )\n",
    "        img_bands = image_request.get_data()\n",
    "        return img_bands, image_request\n",
    "\n",
    "    except Exception as e:\n",
    "        logging.fatal(e, exc_info=True)\n",
    "    \n",
    "\n",
    "def calculate_and_save_best_images(cloud_steps, img_bands, image_request, means):\n",
    "    begining_length = len(img_bands)\n",
    "    clean_steps = np.array([x for x in range(len(img_bands)) if x not in cloud_steps])\n",
    "    keep_steps = []\n",
    "    month_steps = []\n",
    "    month_hash = []\n",
    "    for date in image_request.get_dates():\n",
    "         month_steps.append(date.month)\n",
    "            \n",
    "    # Identify two images per month with the least cloud cover\n",
    "    best_two_per_month = []\n",
    "    for i in range(1, 13):\n",
    "        month_i = []\n",
    "        month_i_clouds = []\n",
    "        for position, item in enumerate(month_steps):\n",
    "            if item == i:\n",
    "                month_i.append(position)\n",
    "        clouds = [val for x, val in enumerate(means) if x in month_i]\n",
    "        if len(clouds) > 2:\n",
    "            clouds = sorted(clouds)[:2]\n",
    "            ids = [x for x, val in enumerate(means) if val in clouds]\n",
    "        else:\n",
    "            ids = month_i_clouds\n",
    "        for x in ids:\n",
    "            best_two_per_month.append(x)\n",
    "                    \n",
    "        # Append the best two per month\n",
    "    for i in best_two_per_month:\n",
    "        counts = Counter([x for x in month_hash])\n",
    "        current_month_count = counts.get(month_steps[i])\n",
    "        if current_month_count == None:\n",
    "            current_month_count = 0\n",
    "        if i not in cloud_steps and current_month_count <= 1: \n",
    "            keep_steps.append(img_bands[i])\n",
    "            month_hash.append(month_steps[i])\n",
    "        if i in cloud_steps and min(clean_steps) < i < max(clean_steps):\n",
    "            if current_month_count <= 1:\n",
    "                nearest_lower = clean_steps[clean_steps > i].min()\n",
    "                nearest_upper = clean_steps[clean_steps < i].max()\n",
    "                img_bands[i] = (img_bands[nearest_lower] + img_bands[nearest_upper])/2\n",
    "                month_hash.append(month_steps[i])\n",
    "                keep_steps.append(img_bands[i])\n",
    "    npify = np.stack(keep_steps)\n",
    "    print(\"{}; removed {} steps of {} initial\".format(npify.shape, len(cloud_steps), begining_length))\n",
    "    return(npify)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(24, 14, 14, 10); removed 22 steps of 103 initial\n",
      "(22, 14, 14, 10); removed 10 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 12 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 14 steps of 50 initial\n",
      "(24, 14, 14, 10); removed 22 steps of 103 initial\n",
      "(22, 14, 14, 10); removed 9 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 15 steps of 50 initial\n",
      "(24, 14, 14, 10); removed 17 steps of 75 initial\n",
      "(22, 14, 14, 10); removed 15 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 4 steps of 50 initial\n",
      "(24, 14, 14, 10); removed 28 steps of 103 initial\n",
      "(24, 14, 14, 10); removed 22 steps of 102 initial\n",
      "(22, 14, 14, 10); removed 14 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 13 steps of 52 initial\n",
      "(22, 14, 14, 10); removed 9 steps of 51 initial\n",
      "(22, 14, 14, 10); removed 9 steps of 52 initial\n",
      "(22, 14, 14, 10); removed 10 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 12 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 13 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 12 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 8 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 10 steps of 50 initial\n",
      "(24, 14, 14, 10); removed 22 steps of 102 initial\n",
      "(24, 14, 14, 10); removed 25 steps of 103 initial\n",
      "(22, 14, 14, 10); removed 14 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 12 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 7 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 15 steps of 52 initial\n",
      "(22, 14, 14, 10); removed 10 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 7 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 14 steps of 52 initial\n",
      "(22, 14, 14, 10); removed 12 steps of 50 initial\n",
      "(24, 14, 14, 10); removed 25 steps of 103 initial\n",
      "(22, 14, 14, 10); removed 11 steps of 51 initial\n",
      "(22, 14, 14, 10); removed 12 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 7 steps of 52 initial\n",
      "(22, 14, 14, 10); removed 10 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 15 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 14 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 13 steps of 51 initial\n",
      "(22, 14, 14, 10); removed 12 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 10 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 12 steps of 51 initial\n",
      "(22, 14, 14, 10); removed 13 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 10 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 20 steps of 86 initial\n",
      "(22, 14, 14, 10); removed 15 steps of 52 initial\n",
      "(22, 14, 14, 10); removed 10 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 9 steps of 51 initial\n",
      "(22, 14, 14, 10); removed 10 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 15 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 12 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 9 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 10 steps of 50 initial\n",
      "(24, 14, 14, 10); removed 21 steps of 103 initial\n",
      "(24, 14, 14, 10); removed 24 steps of 102 initial\n",
      "(22, 14, 14, 10); removed 11 steps of 50 initial\n",
      "(24, 14, 14, 10); removed 21 steps of 103 initial\n",
      "(22, 14, 14, 10); removed 11 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 12 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 7 steps of 50 initial\n",
      "(24, 14, 14, 10); removed 17 steps of 102 initial\n",
      "(22, 14, 14, 10); removed 11 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 12 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 11 steps of 51 initial\n",
      "(24, 14, 14, 10); removed 17 steps of 102 initial\n",
      "(22, 14, 14, 10); removed 10 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 13 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 12 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 10 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 12 steps of 50 initial\n",
      "(24, 14, 14, 10); removed 19 steps of 103 initial\n",
      "(24, 14, 14, 10); removed 24 steps of 103 initial\n",
      "(22, 14, 14, 10); removed 10 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 13 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 14 steps of 52 initial\n",
      "(22, 14, 14, 10); removed 8 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 15 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 12 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 12 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 11 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 12 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 8 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 12 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 16 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 10 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 10 steps of 51 initial\n",
      "(22, 14, 14, 10); removed 11 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 19 steps of 52 initial\n",
      "(22, 14, 14, 10); removed 15 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 11 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 13 steps of 52 initial\n",
      "(22, 14, 14, 10); removed 14 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 10 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 14 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 7 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 12 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 16 steps of 52 initial\n",
      "(22, 14, 14, 10); removed 17 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 12 steps of 50 initial\n",
      "(24, 14, 14, 10); removed 19 steps of 103 initial\n",
      "(24, 14, 14, 10); removed 17 steps of 103 initial\n",
      "(22, 14, 14, 10); removed 14 steps of 50 initial\n",
      "(24, 14, 14, 10); removed 23 steps of 103 initial\n",
      "(22, 14, 14, 10); removed 15 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 9 steps of 52 initial\n",
      "(22, 14, 14, 10); removed 10 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 15 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 12 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 13 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 10 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 19 steps of 52 initial\n",
      "(22, 14, 14, 10); removed 10 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 9 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 10 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 12 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 11 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 8 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 12 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 9 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 10 steps of 51 initial\n",
      "(22, 14, 14, 10); removed 10 steps of 51 initial\n",
      "(22, 14, 14, 10); removed 11 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 10 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 14 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 11 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 10 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 10 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 16 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 16 steps of 52 initial\n",
      "(22, 14, 14, 10); removed 9 steps of 50 initial\n",
      "(24, 14, 14, 10); removed 26 steps of 103 initial\n",
      "(22, 14, 14, 10); removed 10 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 13 steps of 50 initial\n",
      "(24, 14, 14, 10); removed 24 steps of 102 initial\n",
      "(22, 14, 14, 10); removed 12 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 9 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 9 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 15 steps of 52 initial\n",
      "(22, 14, 14, 10); removed 13 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 18 steps of 52 initial\n",
      "(24, 14, 14, 10); removed 11 steps of 96 initial\n",
      "(22, 14, 14, 10); removed 13 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 10 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 13 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 13 steps of 52 initial\n",
      "(22, 14, 14, 10); removed 9 steps of 51 initial\n",
      "(22, 14, 14, 10); removed 15 steps of 52 initial\n",
      "(22, 14, 14, 10); removed 10 steps of 51 initial\n",
      "(22, 14, 14, 10); removed 13 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 19 steps of 52 initial\n",
      "(22, 14, 14, 10); removed 10 steps of 50 initial\n",
      "(24, 14, 14, 10); removed 21 steps of 103 initial\n",
      "(22, 14, 14, 10); removed 10 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 14 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 14 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 10 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 15 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 13 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 14 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 20 steps of 52 initial\n",
      "(22, 14, 14, 10); removed 16 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 11 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 13 steps of 52 initial\n",
      "(22, 14, 14, 10); removed 9 steps of 52 initial\n",
      "(22, 14, 14, 10); removed 9 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 10 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 13 steps of 50 initial\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(22, 14, 14, 10); removed 14 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 14 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 13 steps of 50 initial\n",
      "(22, 14, 14, 10); removed 12 steps of 50 initial\n"
     ]
    }
   ],
   "source": [
    "errors = []\n",
    "for i in range(0, len(locations)):\n",
    "    try:\n",
    "        # Initiate hash tables\n",
    "        cloud, means = identify_clouds(locations[i])\n",
    "        img, image_request = download_tiles(locations[i])\n",
    "        tiles = calculate_and_save_best_images(cloud, img, image_request, means)\n",
    "        np.save(\"../data/processed/\" + str(i), tiles)\n",
    "\n",
    "    except Exception as e:\n",
    "        logging.fatal(e, exc_info=True)\n",
    "        errors.append(img)\n",
    "        #continue"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "remote_sensing",
   "language": "python",
   "name": "remote_sensing"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
